{"version":3,"sources":["Components/Imgur/index.js","GalleriesContext.js","Components/Galleries/index.js","Api.js","Components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["Imgur","props","useState","show","setShow","imgurLoaded","setImgurLoaded","Fragment","className","Spinner","animation","size","src","link","onClick","alt","title","onLoad","Modal","onHide","Header","closeButton","Title","Body","width","Footer","style","justifyContent","description","ups","downs","score","GalleriesContext","createContext","GalleriesProvider","galleries","setGalleries","Provider","value","children","Galleries","useContext","lenght","Row","map","gallery","images","_","get","galleryTitle","image","type","Col","xs","sm","md","lg","axios","create","baseURL","process","headers","Authorization","Search","setImage","sort","setSort","window","setWindow","showError","setShowError","showViral","setShowViral","showSpinner","setShowSpinner","handleSubmit","event","a","preventDefault","stopPropagation","currentTarget","checkValidity","API","response","data","console","error","Form","onSubmit","Group","Label","Control","required","minLength","maxLength","autoComplete","onChange","target","as","defaultValue","Check","id","label","checked","Button","variant","role","aria-hidden","Alert","App","Container","fluid","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e707ee1d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport LazyLoad from \"react-lazy-load\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nfunction Imgur(props) {\r\n  const [show, setShow] = useState(false);\r\n  const [imgurLoaded, setImgurLoaded] = useState(false);\r\n\r\n  const handleShow = () => {\r\n    setShow(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n\r\n  const handleLoaded = () => {\r\n    setImgurLoaded(true);\r\n  };\r\n\r\n  const styleModalFooter = { justifyContent: \"flex-start\" };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"img-container\">\r\n        {!imgurLoaded && (\r\n          <Spinner animation=\"border\" className=\"loader\" size=\"sm\" />\r\n        )}\r\n        <LazyLoad>\r\n          <img\r\n            src={props.link}\r\n            onClick={handleShow}\r\n            alt={props.title}\r\n            onLoad={handleLoaded}\r\n            className=\"imgur\"\r\n          />\r\n        </LazyLoad>\r\n      </div>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{props.title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <img src={props.link} width=\"100%\" alt={props.title} />\r\n        </Modal.Body>\r\n        <Modal.Footer style={styleModalFooter}>\r\n          <ul>\r\n            <li>\r\n              <b>Description: </b>\r\n              {props.description}\r\n            </li>\r\n            <li>\r\n              <b>Upvotes: </b>\r\n              {props.ups}\r\n            </li>\r\n            <li>\r\n              <b>Downvotes: </b>\r\n              {props.downs}\r\n            </li>\r\n            <li>\r\n              <b>Score: </b>\r\n              {props.score}\r\n            </li>\r\n          </ul>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Imgur;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const GalleriesContext = createContext();\r\n\r\nexport const GalleriesProvider = (props) => {\r\n  const [galleries, setGalleries] = useState([]);\r\n\r\n  return (\r\n    <GalleriesContext.Provider value={[galleries, setGalleries]}>\r\n      {props.children}\r\n    </GalleriesContext.Provider>\r\n  );\r\n};\r\n","import _ from \"lodash\";\r\nimport React, { useContext } from \"react\";\r\nimport Imgur from \"../Imgur\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { GalleriesContext } from \"../../GalleriesContext\";\r\n\r\nfunction Galleries(props) {\r\n  const [galleries, setGalleries] = useContext(GalleriesContext);\r\n\r\n  if (galleries.lenght === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      {galleries.map((gallery) => {\r\n        const images = _.get(gallery, \"images\", false);\r\n        const galleryTitle = _.get(gallery, \"title\", \"\");\r\n\r\n        if (!images) {\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n            {images.map((image) => {\r\n              if (image.type !== \"image/jpeg\") {\r\n                return null;\r\n              }\r\n              return (\r\n                <Col xs={12} sm={6} md={4} lg={3}>\r\n                  <div className=\"img-wrapper\">\r\n                    <Imgur {...image} title={galleryTitle} />\r\n                    <span>{galleryTitle}</span>\r\n                  </div>\r\n                </Col>\r\n              );\r\n            })}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Galleries;\r\n","import axios from \"axios\";\r\n\r\nconst CLIENTID = process.env.REACT_APP_CLIENT_ID;\r\nconst APIURL = process.env.REACT_APP_API_URL;\r\n\r\nexport default axios.create({\r\n  baseURL: APIURL,\r\n  headers: { Authorization: `Client-ID ${CLIENTID}` },\r\n});\r\n","import _ from \"lodash\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport API from \"../../Api\";\r\nimport { GalleriesContext } from \"../../GalleriesContext\";\r\n\r\nfunction Search(props) {\r\n  const [galleries, setGalleries] = useContext(GalleriesContext);\r\n  const [image, setImage] = useState(\"\");\r\n  const [sort, setSort] = useState(\"top\");\r\n  const [window, setWindow] = useState(\"all\");\r\n  const [showError, setShowError] = useState(false);\r\n  const [showViral, setShowViral] = useState(true);\r\n  const [showSpinner, setShowSpinner] = useState(false);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setShowSpinner(true);\r\n\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await API.get(\r\n        `/gallery/search/${sort}/${window}/?q=${image}&q_type=jpg&q_size_px=small&showViral=${showViral}`\r\n      );\r\n      setGalleries(response.data.data);\r\n      if (_.size(response.data.data) === 0) {\r\n        setShowError(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    setShowSpinner(false);\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Group>\r\n        <Form.Label>Search for images</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          required\r\n          minLength=\"2\"\r\n          maxLength=\"10\"\r\n          autoComplete=\"off\"\r\n          onChange={(event) => setImage(event.target.value)}\r\n        />\r\n      </Form.Group>\r\n      <Form.Group>\r\n        <Form.Label>Sort by:</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          defaultValue=\"top\"\r\n          onChange={(event) => setSort(event.target.value)}\r\n        >\r\n          <option value=\"top\">Top</option>\r\n          <option value=\"time\">Time</option>\r\n          <option value=\"viral\">Viral</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Group>\r\n        <Form.Label>Window:</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          defaultValue=\"all\"\r\n          onChange={(event) => setWindow(event.target.value)}\r\n        >\r\n          <option value=\"all\">All</option>\r\n          <option value=\"day\">Day</option>\r\n          <option value=\"week\">Week</option>\r\n          <option value=\"month\">Month</option>\r\n          <option value=\"year\">Year</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Group>\r\n        <Form.Check\r\n          type=\"switch\"\r\n          id=\"virals-switch\"\r\n          label=\"Include virals\"\r\n          checked={showViral}\r\n          onChange={(event) => {\r\n            setShowViral(!showViral);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          {showSpinner && (\r\n            <Spinner\r\n              as=\"span\"\r\n              animation=\"border\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          )}{\" \"}\r\n          Search\r\n        </Button>\r\n        <Button variant=\"secondary\" type=\"reset\" className=\"ml-2\">\r\n          Reset\r\n        </Button>\r\n      </div>\r\n      {showError && (\r\n        <Alert variant=\"danger\" className=\"mt-5\">\r\n          No images found.\r\n        </Alert>\r\n      )}\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Galleries from \"./Components/Galleries\";\nimport Search from \"./Components/Search\";\nimport { GalleriesProvider } from \"./GalleriesContext\";\nimport { Row, Col } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <Container fluid className=\"h-100\">\n      <GalleriesProvider>\n        <Row className=\"mt-5 mb-5\">\n          <Col>\n            <Search />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Galleries />\n          </Col>\n        </Row>\n      </GalleriesProvider>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}